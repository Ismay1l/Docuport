//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
    fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
    fileprivate static let hostingBundle = Bundle(for: R.Class.self)
    
    /// Find first language and bundle for which the table exists
    fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
        // Filter preferredLanguages to localizations, use first locale
        var languages = preferredLanguages
            .map { Locale(identifier: $0) }
            .prefix(1)
            .flatMap { locale -> [String] in
                if hostingBundle.localizations.contains(locale.identifier) {
                    if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
                        return [locale.identifier, language]
                    } else {
                        return [locale.identifier]
                    }
                } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
                    return [language]
                } else {
                    return []
                }
            }
        
        // If there's no languages, use development language as backstop
        if languages.isEmpty {
            if let developmentLocalization = hostingBundle.developmentLocalization {
                languages = [developmentLocalization]
            }
        } else {
            // Insert Base as second item (between locale identifier and languageCode)
            languages.insert("Base", at: 1)
            
            // Add development language as backstop
            if let developmentLocalization = hostingBundle.developmentLocalization {
                languages.append(developmentLocalization)
            }
        }
        
        // Find first language for which table exists
        // Note: key might not exist in chosen language (in that case, key will be shown)
        for language in languages {
            if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
               let lbundle = Bundle(url: lproj)
            {
                let strings = lbundle.url(forResource: tableName, withExtension: "strings")
                let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")
                
                if strings != nil || stringsdict != nil {
                    return (Locale(identifier: language), lbundle)
                }
            }
        }
        
        // If table is available in main bundle, don't look for localized resources
        let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
        let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)
        
        if strings != nil || stringsdict != nil {
            return (applicationLocale, hostingBundle)
        }
        
        // If table is not found for requested languages, key will be shown
        return nil
    }
    
    /// Load string from Info.plist file
    fileprivate static func infoPlistString(path: [String], key: String) -> String? {
        var dict = hostingBundle.infoDictionary
        for step in path {
            guard let obj = dict?[step] as? [String: Any] else { return nil }
            dict = obj
        }
        return dict?[key] as? String
    }
    
    static func validate() throws {
        try intern.validate()
    }
    
    #if os(iOS) || os(tvOS)
    /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
    struct storyboard {
        /// Storyboard `Advisor`.
        static let advisor = _R.storyboard.advisor()
        /// Storyboard `Client`.
        static let client = _R.storyboard.client()
        /// Storyboard `LaunchScreen`.
        static let launchScreen = _R.storyboard.launchScreen()
        /// Storyboard `Main`.
        static let main = _R.storyboard.main()
        
        #if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "Advisor", bundle: ...)`
        static func advisor(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.advisor)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "Client", bundle: ...)`
        static func client(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.client)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
        static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "Main", bundle: ...)`
        static func main(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.main)
        }
        #endif
        
        fileprivate init() {}
    }
    #endif
    
    /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
    struct entitlements {
        struct comAppleSecurityApplicationGroups {
            static let groupComImposta = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.imposta") ?? "group.com.imposta"
            
            fileprivate init() {}
        }
        
        fileprivate init() {}
    }
    
    /// This `R.image` struct is generated, and contains static references to 79 images.
    struct image {
        /// Image `account`.
        static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "account")
        /// Image `addButton`.
        static let addButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "addButton")
        /// Image `arrowRight`.
        static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowRight")
        /// Image `backButton`.
        static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "backButton")
        /// Image `btnShare`.
        static let btnShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnShare")
        /// Image `businessAccount`.
        static let businessAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "businessAccount")
        /// Image `business`.
        static let business = Rswift.ImageResource(bundle: R.hostingBundle, name: "business")
        /// Image `buttonCloseBlack`.
        static let buttonCloseBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonCloseBlack")
        /// Image `buttonClose`.
        static let buttonClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonClose")
        /// Image `buttonSearch`.
        static let buttonSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonSearch")
        /// Image `buttonSend`.
        static let buttonSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonSend")
        /// Image `calendar`.
        static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
        /// Image `closeButtonGreen`.
        static let closeButtonGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeButtonGreen")
        /// Image `closeButton`.
        static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeButton")
        /// Image `docPhoto`.
        static let docPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "docPhoto")
        /// Image `documentsPhotoBig`.
        static let documentsPhotoBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "documentsPhotoBig")
        /// Image `downArrow`.
        static let downArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downArrow")
        /// Image `downloadButton`.
        static let downloadButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "downloadButton")
        /// Image `editProfile`.
        static let editProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "editProfile")
        /// Image `edit`.
        static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
        /// Image `empty-icon`.
        static let emptyIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty-icon")
        /// Image `excel`.
        static let excel = Rswift.ImageResource(bundle: R.hostingBundle, name: "excel")
        /// Image `gridButton`.
        static let gridButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "gridButton")
        /// Image `hamburgerMenu`.
        static let hamburgerMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "hamburgerMenu")
        /// Image `iconAccount`.
        static let iconAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAccount")
        /// Image `iconAddSquare`.
        static let iconAddSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAddSquare")
        /// Image `iconBack`.
        static let iconBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBack")
        /// Image `iconCalendar`.
        static let iconCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCalendar")
        /// Image `iconChecked`.
        static let iconChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconChecked")
        /// Image `iconEdit`.
        static let iconEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEdit")
        /// Image `iconGridBank`.
        static let iconGridBank = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGridBank")
        /// Image `iconGridBookkeeping`.
        static let iconGridBookkeeping = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGridBookkeeping")
        /// Image `iconGridCompanyDocs`.
        static let iconGridCompanyDocs = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGridCompanyDocs")
        /// Image `iconGridFinancial`.
        static let iconGridFinancial = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGridFinancial")
        /// Image `iconGridPayroll`.
        static let iconGridPayroll = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGridPayroll")
        /// Image `iconGridTax`.
        static let iconGridTax = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGridTax")
        /// Image `iconGridUploads`.
        static let iconGridUploads = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGridUploads")
        /// Image `iconListBank`.
        static let iconListBank = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconListBank")
        /// Image `iconListBookkeeping`.
        static let iconListBookkeeping = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconListBookkeeping")
        /// Image `iconListCompanyDocs`.
        static let iconListCompanyDocs = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconListCompanyDocs")
        /// Image `iconListFinancial`.
        static let iconListFinancial = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconListFinancial")
        /// Image `iconListPayroll`.
        static let iconListPayroll = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconListPayroll")
        /// Image `iconListTax`.
        static let iconListTax = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconListTax")
        /// Image `iconListUploads`.
        static let iconListUploads = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconListUploads")
        /// Image `iconSave`.
        static let iconSave = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSave")
        /// Image `iconSend`.
        static let iconSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSend")
        /// Image `iconSettingsBlog`.
        static let iconSettingsBlog = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSettingsBlog")
        /// Image `iconSettingsContact`.
        static let iconSettingsContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSettingsContact")
        /// Image `iconSettingsInvite`.
        static let iconSettingsInvite = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSettingsInvite")
        /// Image `iconTabClients`.
        static let iconTabClients = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabClients")
        /// Image `iconTabHome`.
        static let iconTabHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabHome")
        /// Image `iconTabSettings`.
        static let iconTabSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabSettings")
        /// Image `iconTabUpload`.
        static let iconTabUpload = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabUpload")
        /// Image `invalidError`.
        static let invalidError = Rswift.ImageResource(bundle: R.hostingBundle, name: "invalidError")
        /// Image `jpg`.
        static let jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "jpg")
        /// Image `line`.
        static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
        /// Image `listButton`.
        static let listButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "listButton")
        /// Image `loginLogo`.
        static let loginLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginLogo")
        /// Image `logoIcon`.
        static let logoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoIcon")
        /// Image `logoNav`.
        static let logoNav = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoNav")
        /// Image `logo`.
        static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
        /// Image `noPhoto2`.
        static let noPhoto2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "noPhoto2")
        /// Image `noPhoto`.
        static let noPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "noPhoto")
        /// Image `pdf`.
        static let pdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "pdf")
        /// Image `personalAccount`.
        static let personalAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "personalAccount")
        /// Image `personal`.
        static let personal = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal")
        /// Image `plus`.
        static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
        /// Image `png`.
        static let png = Rswift.ImageResource(bundle: R.hostingBundle, name: "png")
        /// Image `profilePhoto`.
        static let profilePhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePhoto")
        /// Image `profilePic`.
        static let profilePic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePic")
        /// Image `profileTabBar`.
        static let profileTabBar = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileTabBar")
        /// Image `profile_selected_1x`.
        static let profile_selected_1x = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_selected_1x")
        /// Image `rightArrow`.
        static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
        /// Image `search`.
        static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
        /// Image `seeButton`.
        static let seeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "seeButton")
        /// Image `sendEmail`.
        static let sendEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendEmail")
        /// Image `share`.
        static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
        /// Image `splashLogo`.
        static let splashLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashLogo")
        /// Image `word`.
        static let word = Rswift.ImageResource(bundle: R.hostingBundle, name: "word")
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "account", bundle: ..., traitCollection: ...)`
        static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.account, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "addButton", bundle: ..., traitCollection: ...)`
        static func addButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.addButton, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "arrowRight", bundle: ..., traitCollection: ...)`
        static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "backButton", bundle: ..., traitCollection: ...)`
        static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.backButton, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "btnShare", bundle: ..., traitCollection: ...)`
        static func btnShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.btnShare, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "business", bundle: ..., traitCollection: ...)`
        static func business(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.business, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "businessAccount", bundle: ..., traitCollection: ...)`
        static func businessAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.businessAccount, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "buttonClose", bundle: ..., traitCollection: ...)`
        static func buttonClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.buttonClose, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "buttonCloseBlack", bundle: ..., traitCollection: ...)`
        static func buttonCloseBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.buttonCloseBlack, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "buttonSearch", bundle: ..., traitCollection: ...)`
        static func buttonSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.buttonSearch, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "buttonSend", bundle: ..., traitCollection: ...)`
        static func buttonSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.buttonSend, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
        static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "closeButton", bundle: ..., traitCollection: ...)`
        static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "closeButtonGreen", bundle: ..., traitCollection: ...)`
        static func closeButtonGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.closeButtonGreen, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "docPhoto", bundle: ..., traitCollection: ...)`
        static func docPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.docPhoto, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "documentsPhotoBig", bundle: ..., traitCollection: ...)`
        static func documentsPhotoBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.documentsPhotoBig, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "downArrow", bundle: ..., traitCollection: ...)`
        static func downArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.downArrow, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "downloadButton", bundle: ..., traitCollection: ...)`
        static func downloadButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.downloadButton, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
        static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "editProfile", bundle: ..., traitCollection: ...)`
        static func editProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.editProfile, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "empty-icon", bundle: ..., traitCollection: ...)`
        static func emptyIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.emptyIcon, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "excel", bundle: ..., traitCollection: ...)`
        static func excel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.excel, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "gridButton", bundle: ..., traitCollection: ...)`
        static func gridButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gridButton, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "hamburgerMenu", bundle: ..., traitCollection: ...)`
        static func hamburgerMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hamburgerMenu, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconAccount", bundle: ..., traitCollection: ...)`
        static func iconAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconAccount, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconAddSquare", bundle: ..., traitCollection: ...)`
        static func iconAddSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconAddSquare, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconBack", bundle: ..., traitCollection: ...)`
        static func iconBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconBack, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconCalendar", bundle: ..., traitCollection: ...)`
        static func iconCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconCalendar, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconChecked", bundle: ..., traitCollection: ...)`
        static func iconChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconChecked, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconEdit", bundle: ..., traitCollection: ...)`
        static func iconEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconEdit, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconGridBank", bundle: ..., traitCollection: ...)`
        static func iconGridBank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconGridBank, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconGridBookkeeping", bundle: ..., traitCollection: ...)`
        static func iconGridBookkeeping(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconGridBookkeeping, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconGridCompanyDocs", bundle: ..., traitCollection: ...)`
        static func iconGridCompanyDocs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconGridCompanyDocs, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconGridFinancial", bundle: ..., traitCollection: ...)`
        static func iconGridFinancial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconGridFinancial, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconGridPayroll", bundle: ..., traitCollection: ...)`
        static func iconGridPayroll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconGridPayroll, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconGridTax", bundle: ..., traitCollection: ...)`
        static func iconGridTax(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconGridTax, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconGridUploads", bundle: ..., traitCollection: ...)`
        static func iconGridUploads(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconGridUploads, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconListBank", bundle: ..., traitCollection: ...)`
        static func iconListBank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconListBank, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconListBookkeeping", bundle: ..., traitCollection: ...)`
        static func iconListBookkeeping(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconListBookkeeping, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconListCompanyDocs", bundle: ..., traitCollection: ...)`
        static func iconListCompanyDocs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconListCompanyDocs, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconListFinancial", bundle: ..., traitCollection: ...)`
        static func iconListFinancial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconListFinancial, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconListPayroll", bundle: ..., traitCollection: ...)`
        static func iconListPayroll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconListPayroll, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconListTax", bundle: ..., traitCollection: ...)`
        static func iconListTax(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconListTax, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconListUploads", bundle: ..., traitCollection: ...)`
        static func iconListUploads(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconListUploads, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconSave", bundle: ..., traitCollection: ...)`
        static func iconSave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconSave, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconSend", bundle: ..., traitCollection: ...)`
        static func iconSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconSend, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconSettingsBlog", bundle: ..., traitCollection: ...)`
        static func iconSettingsBlog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconSettingsBlog, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconSettingsContact", bundle: ..., traitCollection: ...)`
        static func iconSettingsContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconSettingsContact, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconSettingsInvite", bundle: ..., traitCollection: ...)`
        static func iconSettingsInvite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconSettingsInvite, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconTabClients", bundle: ..., traitCollection: ...)`
        static func iconTabClients(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconTabClients, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconTabHome", bundle: ..., traitCollection: ...)`
        static func iconTabHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconTabHome, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconTabSettings", bundle: ..., traitCollection: ...)`
        static func iconTabSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconTabSettings, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "iconTabUpload", bundle: ..., traitCollection: ...)`
        static func iconTabUpload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iconTabUpload, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "invalidError", bundle: ..., traitCollection: ...)`
        static func invalidError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.invalidError, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "jpg", bundle: ..., traitCollection: ...)`
        static func jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.jpg, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
        static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "listButton", bundle: ..., traitCollection: ...)`
        static func listButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.listButton, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "loginLogo", bundle: ..., traitCollection: ...)`
        static func loginLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.loginLogo, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
        static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "logoIcon", bundle: ..., traitCollection: ...)`
        static func logoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.logoIcon, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "logoNav", bundle: ..., traitCollection: ...)`
        static func logoNav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.logoNav, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "noPhoto", bundle: ..., traitCollection: ...)`
        static func noPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.noPhoto, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "noPhoto2", bundle: ..., traitCollection: ...)`
        static func noPhoto2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.noPhoto2, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "pdf", bundle: ..., traitCollection: ...)`
        static func pdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pdf, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "personal", bundle: ..., traitCollection: ...)`
        static func personal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.personal, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "personalAccount", bundle: ..., traitCollection: ...)`
        static func personalAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.personalAccount, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
        static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "png", bundle: ..., traitCollection: ...)`
        static func png(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.png, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "profilePhoto", bundle: ..., traitCollection: ...)`
        static func profilePhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.profilePhoto, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "profilePic", bundle: ..., traitCollection: ...)`
        static func profilePic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.profilePic, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "profileTabBar", bundle: ..., traitCollection: ...)`
        static func profileTabBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.profileTabBar, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "profile_selected_1x", bundle: ..., traitCollection: ...)`
        static func profile_selected_1x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.profile_selected_1x, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
        static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
        static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "seeButton", bundle: ..., traitCollection: ...)`
        static func seeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.seeButton, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "sendEmail", bundle: ..., traitCollection: ...)`
        static func sendEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sendEmail, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
        static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "splashLogo", bundle: ..., traitCollection: ...)`
        static func splashLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.splashLogo, compatibleWith: traitCollection)
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "word", bundle: ..., traitCollection: ...)`
        static func word(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.word, compatibleWith: traitCollection)
        }
        #endif
        
        fileprivate init() {}
    }
    
    /// This `R.reuseIdentifier` struct is generated, and contains static references to 14 reuse identifiers.
    struct reuseIdentifier {
        /// Reuse identifier `AccountsCell`.
        static let accountsCell: Rswift.ReuseIdentifier<AccountsCell> = Rswift.ReuseIdentifier(identifier: "AccountsCell")
        /// Reuse identifier `AccountsTVCell`.
        static let accountsTVCell: Rswift.ReuseIdentifier<AccountsTVCell> = Rswift.ReuseIdentifier(identifier: "AccountsTVCell")
        /// Reuse identifier `ClientCell`.
        static let clientCell: Rswift.ReuseIdentifier<ClientCell> = Rswift.ReuseIdentifier(identifier: "ClientCell")
        /// Reuse identifier `ClientTVCell`.
        static let clientTVCell: Rswift.ReuseIdentifier<ClientTVCell> = Rswift.ReuseIdentifier(identifier: "ClientTVCell")
        /// Reuse identifier `DocumentCell`.
        static let documentCell: Rswift.ReuseIdentifier<DocumentCell> = Rswift.ReuseIdentifier(identifier: "DocumentCell")
        /// Reuse identifier `DownloadCell`.
        static let downloadCell: Rswift.ReuseIdentifier<DownloadCell> = Rswift.ReuseIdentifier(identifier: "DownloadCell")
        /// Reuse identifier `EmployeeEditCell`.
        static let employeeEditCell: Rswift.ReuseIdentifier<EmployeeEditCell> = Rswift.ReuseIdentifier(identifier: "EmployeeEditCell")
        /// Reuse identifier `InvitationCell`.
        static let invitationCell: Rswift.ReuseIdentifier<InvitationCell> = Rswift.ReuseIdentifier(identifier: "InvitationCell")
        /// Reuse identifier `LeftMenuCell`.
        static let leftMenuCell: Rswift.ReuseIdentifier<LeftMenuCell> = Rswift.ReuseIdentifier(identifier: "LeftMenuCell")
        /// Reuse identifier `NoDocsCell`.
        static let noDocsCell: Rswift.ReuseIdentifier<EmployeeEditCell> = Rswift.ReuseIdentifier(identifier: "NoDocsCell")
        /// Reuse identifier `SelectServicesTVCell`.
        static let selectServicesTVCell: Rswift.ReuseIdentifier<SelectServicesTVCell> = Rswift.ReuseIdentifier(identifier: "SelectServicesTVCell")
        /// Reuse identifier `ServiceCell`.
        static let serviceCell: Rswift.ReuseIdentifier<ServiceCell> = Rswift.ReuseIdentifier(identifier: "ServiceCell")
        /// Reuse identifier `SwitchUserCell`.
        static let switchUserCell: Rswift.ReuseIdentifier<SwitchUserCell> = Rswift.ReuseIdentifier(identifier: "SwitchUserCell")
        /// Reuse identifier `UploadServicesClientTVCell`.
        static let uploadServicesClientTVCell: Rswift.ReuseIdentifier<UploadServicesClientTVCell> = Rswift.ReuseIdentifier(identifier: "UploadServicesClientTVCell")
        
        fileprivate init() {}
    }
    
    fileprivate struct intern: Rswift.Validatable {
        fileprivate static func validate() throws {
            try _R.validate()
        }
        
        fileprivate init() {}
    }
    
    fileprivate class Class {}
    
    fileprivate init() {}
}

struct _R: Rswift.Validatable {
    static func validate() throws {
        #if os(iOS) || os(tvOS)
        try storyboard.validate()
        #endif
    }
    
    #if os(iOS) || os(tvOS)
    struct storyboard: Rswift.Validatable {
        static func validate() throws {
            #if os(iOS) || os(tvOS)
            try advisor.validate()
            #endif
            #if os(iOS) || os(tvOS)
            try client.validate()
            #endif
            #if os(iOS) || os(tvOS)
            try launchScreen.validate()
            #endif
            #if os(iOS) || os(tvOS)
            try main.validate()
            #endif
        }
        
        #if os(iOS) || os(tvOS)
        struct advisor: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UploadWrapperVC
            
            let advisorTabBarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "AdvisorTabBarController")
            let bundle = R.hostingBundle
            let clientEditNVC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "clientEditNVC")
            let clientInfoEditVC = StoryboardViewControllerResource<ClientInfoEditVC>(identifier: "ClientInfoEditVC")
            let clientInfoVC = StoryboardViewControllerResource<ClientInfoVC>(identifier: "ClientInfoVC")
            let clientNewVC = StoryboardViewControllerResource<ClientNewVC>(identifier: "ClientNewVC")
            let employeeEditNewVC = StoryboardViewControllerResource<EmployeeEditNewVC>(identifier: "EmployeeEditNewVC")
            let name = "Advisor"
            let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
            let selectServiceVC = StoryboardViewControllerResource<SelectServiceVC>(identifier: "SelectServiceVC")
            let uploadAdvisorVC = StoryboardViewControllerResource<UploadAdvisorVC>(identifier: "UploadAdvisorVC")
            let uploadClientListVC = StoryboardViewControllerResource<UploadClientListVC>(identifier: "UploadClientListVC")
            let uploadDescriptionVC = StoryboardViewControllerResource<UploadDescriptionVC>(identifier: "UploadDescriptionVC")
            let uploadServiceListVC = StoryboardViewControllerResource<UploadServiceListVC>(identifier: "UploadServiceListVC")
            let uploadWrapperVC = StoryboardViewControllerResource<UploadWrapperVC>(identifier: "UploadWrapperVC")
            
            func advisorTabBarController(_: Void = ()) -> UIKit.UITabBarController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: advisorTabBarController)
            }
            
            func clientEditNVC(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientEditNVC)
            }
            
            func clientInfoEditVC(_: Void = ()) -> ClientInfoEditVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientInfoEditVC)
            }
            
            func clientInfoVC(_: Void = ()) -> ClientInfoVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientInfoVC)
            }
            
            func clientNewVC(_: Void = ()) -> ClientNewVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientNewVC)
            }
            
            func employeeEditNewVC(_: Void = ()) -> EmployeeEditNewVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: employeeEditNewVC)
            }
            
            func profileVC(_: Void = ()) -> ProfileVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
            }
            
            func selectServiceVC(_: Void = ()) -> SelectServiceVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectServiceVC)
            }
            
            func uploadAdvisorVC(_: Void = ()) -> UploadAdvisorVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadAdvisorVC)
            }
            
            func uploadClientListVC(_: Void = ()) -> UploadClientListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadClientListVC)
            }
            
            func uploadDescriptionVC(_: Void = ()) -> UploadDescriptionVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadDescriptionVC)
            }
            
            func uploadServiceListVC(_: Void = ()) -> UploadServiceListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadServiceListVC)
            }
            
            func uploadWrapperVC(_: Void = ()) -> UploadWrapperVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadWrapperVC)
            }
            
            static func validate() throws {
                if UIKit.UIImage(named: "addButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addButton' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "buttonClose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buttonClose' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "buttonCloseBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buttonCloseBlack' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "buttonSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buttonSend' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "gridButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridButton' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAccount' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconAddSquare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAddSquare' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBack' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconEdit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEdit' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconGridBank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconGridBank' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconSave", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSave' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconTabClients", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTabClients' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconTabHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTabHome' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconTabUpload", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTabUpload' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "listButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listButton' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "logoIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoIcon' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "logoNav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoNav' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "noPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noPhoto' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "noPhoto2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noPhoto2' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "profilePhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePhoto' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if UIKit.UIImage(named: "profileTabBar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileTabBar' is used in storyboard 'Advisor', but couldn't be loaded.") }
                if #available(iOS 11.0, tvOS 11.0, *) {
                }
                if _R.storyboard.advisor().advisorTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'advisorTabBarController' could not be loaded from storyboard 'Advisor' as 'UIKit.UITabBarController'.") }
                if _R.storyboard.advisor().clientInfoEditVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientInfoEditVC' could not be loaded from storyboard 'Advisor' as 'ClientInfoEditVC'.") }
                if _R.storyboard.advisor().clientInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientInfoVC' could not be loaded from storyboard 'Advisor' as 'ClientInfoVC'.") }
                if _R.storyboard.advisor().clientNewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientNewVC' could not be loaded from storyboard 'Advisor' as 'ClientNewVC'.") }
                if _R.storyboard.advisor().employeeEditNewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'employeeEditNewVC' could not be loaded from storyboard 'Advisor' as 'EmployeeEditNewVC'.") }
                if _R.storyboard.advisor().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Advisor' as 'ProfileVC'.") }
                if _R.storyboard.advisor().selectServiceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectServiceVC' could not be loaded from storyboard 'Advisor' as 'SelectServiceVC'.") }
                if _R.storyboard.advisor().uploadAdvisorVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadAdvisorVC' could not be loaded from storyboard 'Advisor' as 'UploadAdvisorVC'.") }
                if _R.storyboard.advisor().uploadClientListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadClientListVC' could not be loaded from storyboard 'Advisor' as 'UploadClientListVC'.") }
                if _R.storyboard.advisor().uploadDescriptionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadDescriptionVC' could not be loaded from storyboard 'Advisor' as 'UploadDescriptionVC'.") }
                if _R.storyboard.advisor().uploadServiceListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadServiceListVC' could not be loaded from storyboard 'Advisor' as 'UploadServiceListVC'.") }
                if _R.storyboard.advisor().uploadWrapperVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadWrapperVC' could not be loaded from storyboard 'Advisor' as 'UploadWrapperVC'.") }
                if _R.storyboard.advisor().clientEditNVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientEditNVC' could not be loaded from storyboard 'Advisor' as 'UIKit.UINavigationController'.") }
            }
            
            fileprivate init() {}
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        struct client: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UIKit.UITabBarController
            
            let accountsVC = StoryboardViewControllerResource<AccountsVC>(identifier: "AccountsVC")
            let bundle = R.hostingBundle
            let clientTabBarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "ClientTabBarController")
            let contactVC = StoryboardViewControllerResource<ContactVC>(identifier: "ContactVC")
            let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
            let inviteVC = StoryboardViewControllerResource<InviteVC>(identifier: "InviteVC")
            let name = "Client"
            let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
            let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
            let uploadClientVC = StoryboardViewControllerResource<UploadClientVC>(identifier: "UploadClientVC")
            let uploadServicesClientVC = StoryboardViewControllerResource<UploadServicesClientVC>(identifier: "UploadServicesClientVC")
            
            func accountsVC(_: Void = ()) -> AccountsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountsVC)
            }
            
            func clientTabBarController(_: Void = ()) -> UIKit.UITabBarController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientTabBarController)
            }
            
            func contactVC(_: Void = ()) -> ContactVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactVC)
            }
            
            func homeVC(_: Void = ()) -> HomeVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
            }
            
            func inviteVC(_: Void = ()) -> InviteVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteVC)
            }
            
            func profileVC(_: Void = ()) -> ProfileVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
            }
            
            func settingsVC(_: Void = ()) -> SettingsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
            }
            
            func uploadClientVC(_: Void = ()) -> UploadClientVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadClientVC)
            }
            
            func uploadServicesClientVC(_: Void = ()) -> UploadServicesClientVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadServicesClientVC)
            }
            
            static func validate() throws {
                if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "buttonCloseBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buttonCloseBlack' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "gridButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridButton' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAccount' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBack' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconChecked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconChecked' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconGridBank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconGridBank' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSend' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconSettingsBlog", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSettingsBlog' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconSettingsContact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSettingsContact' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconSettingsInvite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSettingsInvite' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconTabHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTabHome' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconTabSettings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTabSettings' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconTabUpload", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTabUpload' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "listButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listButton' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "logoIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoIcon' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "logoNav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoNav' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "profilePhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePhoto' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "profileTabBar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileTabBar' is used in storyboard 'Client', but couldn't be loaded.") }
                if UIKit.UIImage(named: "profile_selected_1x", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_selected_1x' is used in storyboard 'Client', but couldn't be loaded.") }
                if #available(iOS 11.0, tvOS 11.0, *) {
                }
                if _R.storyboard.client().accountsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountsVC' could not be loaded from storyboard 'Client' as 'AccountsVC'.") }
                if _R.storyboard.client().clientTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientTabBarController' could not be loaded from storyboard 'Client' as 'UIKit.UITabBarController'.") }
                if _R.storyboard.client().contactVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactVC' could not be loaded from storyboard 'Client' as 'ContactVC'.") }
                if _R.storyboard.client().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Client' as 'HomeVC'.") }
                if _R.storyboard.client().inviteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteVC' could not be loaded from storyboard 'Client' as 'InviteVC'.") }
                if _R.storyboard.client().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Client' as 'ProfileVC'.") }
                if _R.storyboard.client().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Client' as 'SettingsVC'.") }
                if _R.storyboard.client().uploadClientVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadClientVC' could not be loaded from storyboard 'Client' as 'UploadClientVC'.") }
                if _R.storyboard.client().uploadServicesClientVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadServicesClientVC' could not be loaded from storyboard 'Client' as 'UploadServicesClientVC'.") }
            }
            
            fileprivate init() {}
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UIKit.UIViewController
            
            let bundle = R.hostingBundle
            let name = "LaunchScreen"
            
            static func validate() throws {
                if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
                if #available(iOS 11.0, tvOS 11.0, *) {
                }
            }
            
            fileprivate init() {}
        }
        #endif
        
        #if os(iOS) || os(tvOS)
        struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UIKit.UINavigationController
            
            let accountsOldVC = StoryboardViewControllerResource<AccountsOldVC>(identifier: "AccountsOldVC")
            let addAccountVC = StoryboardViewControllerResource<AddAccountVC>(identifier: "AddAccountVC")
            let advisorListVC = StoryboardViewControllerResource<AdvisorListVC>(identifier: "AdvisorListVC")
            let birthdateVC = StoryboardViewControllerResource<BirthdateVC>(identifier: "BirthdateVC")
            let bundle = R.hostingBundle
            let clientDetailNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "clientDetailNav")
            let clientDetailVC = StoryboardViewControllerResource<ClientDetailVC>(identifier: "ClientDetailVC")
            let clientEditNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "clientEditNav")
            let clientProfileEditVC = StoryboardViewControllerResource<ClientProfileEditVC>(identifier: "ClientProfileEditVC")
            let clientSearchVC = StoryboardViewControllerResource<ClientSearchVC>(identifier: "ClientSearchVC")
            let clientVC = StoryboardViewControllerResource<ClientVC>(identifier: "ClientVC")
            let documentClientListVC = StoryboardViewControllerResource<DocumentClientListVC>(identifier: "DocumentClientListVC")
            let documentDescVC = StoryboardViewControllerResource<DocumentDescVC>(identifier: "DocumentDescVC")
            let documentEditNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "documentEditNav")
            let documentEditVC = StoryboardViewControllerResource<DocumentEditVC>(identifier: "DocumentEditVC")
            let documentNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "documentNav")
            let documentRealtedDocsVC = StoryboardViewControllerResource<DocumentRealtedDocsVC>(identifier: "DocumentRealtedDocsVC")
            let documentSearchVC = StoryboardViewControllerResource<DocumentSearchVC>(identifier: "DocumentSearchVC")
            let documentServicesVC = StoryboardViewControllerResource<DocumentServicesVC>(identifier: "DocumentServicesVC")
            let documentUploadVC = StoryboardViewControllerResource<DocumentUploadVC>(identifier: "DocumentUploadVC")
            let documentsOldVC = StoryboardViewControllerResource<DocumentsOldVC>(identifier: "DocumentsOldVC")
            let documentsVC = StoryboardViewControllerResource<DocumentsVC>(identifier: "DocumentsVC")
            let downloadVC = StoryboardViewControllerResource<DownloadVC>(identifier: "DownloadVC")
            let employeeEditVC = StoryboardViewControllerResource<EmployeeEditVC>(identifier: "EmployeeEditVC")
            let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
            let imagePreviewVC = StoryboardViewControllerResource<ImagePreviewVC>(identifier: "ImagePreviewVC")
            let inboxDetailVC = StoryboardViewControllerResource<InboxDetailVC>(identifier: "InboxDetailVC")
            let invitationSearchVC = StoryboardViewControllerResource<InvitationSearchVC>(identifier: "InvitationSearchVC")
            let invitationsVC = StoryboardViewControllerResource<InvitationsVC>(identifier: "InvitationsVC")
            let leftMenuVC = StoryboardViewControllerResource<LeftMenuVC>(identifier: "LeftMenuVC")
            let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
            let name = "Main"
            let outboxDetailNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "outboxDetailNav")
            let outboxDetailVC = StoryboardViewControllerResource<OutboxDetailVC>(identifier: "OutboxDetailVC")
            let profileOldVC = StoryboardViewControllerResource<ProfileOldVC>(identifier: "ProfileOldVC")
            let rootNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "rootNav")
            let serviceListVC = StoryboardViewControllerResource<ServiceListVC>(identifier: "ServiceListVC")
            let switchVC = StoryboardViewControllerResource<SwitchVC>(identifier: "SwitchVC")
            
            func accountsOldVC(_: Void = ()) -> AccountsOldVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountsOldVC)
            }
            
            func addAccountVC(_: Void = ()) -> AddAccountVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAccountVC)
            }
            
            func advisorListVC(_: Void = ()) -> AdvisorListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: advisorListVC)
            }
            
            func birthdateVC(_: Void = ()) -> BirthdateVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: birthdateVC)
            }
            
            func clientDetailNav(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientDetailNav)
            }
            
            func clientDetailVC(_: Void = ()) -> ClientDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientDetailVC)
            }
            
            func clientEditNav(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientEditNav)
            }
            
            func clientProfileEditVC(_: Void = ()) -> ClientProfileEditVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientProfileEditVC)
            }
            
            func clientSearchVC(_: Void = ()) -> ClientSearchVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientSearchVC)
            }
            
            func clientVC(_: Void = ()) -> ClientVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clientVC)
            }
            
            func documentClientListVC(_: Void = ()) -> DocumentClientListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentClientListVC)
            }
            
            func documentDescVC(_: Void = ()) -> DocumentDescVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentDescVC)
            }
            
            func documentEditNav(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentEditNav)
            }
            
            func documentEditVC(_: Void = ()) -> DocumentEditVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentEditVC)
            }
            
            func documentNav(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentNav)
            }
            
            func documentRealtedDocsVC(_: Void = ()) -> DocumentRealtedDocsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentRealtedDocsVC)
            }
            
            func documentSearchVC(_: Void = ()) -> DocumentSearchVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentSearchVC)
            }
            
            func documentServicesVC(_: Void = ()) -> DocumentServicesVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentServicesVC)
            }
            
            func documentUploadVC(_: Void = ()) -> DocumentUploadVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentUploadVC)
            }
            
            func documentsOldVC(_: Void = ()) -> DocumentsOldVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentsOldVC)
            }
            
            func documentsVC(_: Void = ()) -> DocumentsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentsVC)
            }
            
            func downloadVC(_: Void = ()) -> DownloadVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: downloadVC)
            }
            
            func employeeEditVC(_: Void = ()) -> EmployeeEditVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: employeeEditVC)
            }
            
            func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
            }
            
            func imagePreviewVC(_: Void = ()) -> ImagePreviewVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imagePreviewVC)
            }
            
            func inboxDetailVC(_: Void = ()) -> InboxDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inboxDetailVC)
            }
            
            func invitationSearchVC(_: Void = ()) -> InvitationSearchVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invitationSearchVC)
            }
            
            func invitationsVC(_: Void = ()) -> InvitationsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invitationsVC)
            }
            
            func leftMenuVC(_: Void = ()) -> LeftMenuVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftMenuVC)
            }
            
            func loginVC(_: Void = ()) -> LoginVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
            }
            
            func outboxDetailNav(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: outboxDetailNav)
            }
            
            func outboxDetailVC(_: Void = ()) -> OutboxDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: outboxDetailVC)
            }
            
            func profileOldVC(_: Void = ()) -> ProfileOldVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileOldVC)
            }
            
            func rootNav(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootNav)
            }
            
            func serviceListVC(_: Void = ()) -> ServiceListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: serviceListVC)
            }
            
            func switchVC(_: Void = ()) -> SwitchVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: switchVC)
            }

            static func validate() throws {
                if UIKit.UIImage(named: "account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'account' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "backButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backButton' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "btnShare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btnShare' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "buttonSearch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buttonSearch' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "closeButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeButton' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "closeButtonGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeButtonGreen' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "docPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'docPhoto' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "documentsPhotoBig", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'documentsPhotoBig' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "downArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downArrow' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "downloadButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downloadButton' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "editProfile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editProfile' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "gridButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridButton' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAccount' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBack' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "iconGridBank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconGridBank' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "invalidError", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'invalidError' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "listButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listButton' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "logoIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoIcon' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "logoNav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoNav' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "personal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "profilePic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePic' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "rightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rightArrow' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "seeButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seeButton' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "sendEmail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sendEmail' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'Main', but couldn't be loaded.") }
                if UIKit.UIImage(named: "square.and.arrow.up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'square.and.arrow.up' is used in storyboard 'Main', but couldn't be loaded.") }
                if #available(iOS 11.0, tvOS 11.0, *) {
                }
                if _R.storyboard.main().accountsOldVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountsOldVC' could not be loaded from storyboard 'Main' as 'AccountsOldVC'.") }
                if _R.storyboard.main().addAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAccountVC' could not be loaded from storyboard 'Main' as 'AddAccountVC'.") }
                if _R.storyboard.main().advisorListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'advisorListVC' could not be loaded from storyboard 'Main' as 'AdvisorListVC'.") }
                if _R.storyboard.main().birthdateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'birthdateVC' could not be loaded from storyboard 'Main' as 'BirthdateVC'.") }
                if _R.storyboard.main().clientDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientDetailVC' could not be loaded from storyboard 'Main' as 'ClientDetailVC'.") }
                if _R.storyboard.main().clientProfileEditVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientProfileEditVC' could not be loaded from storyboard 'Main' as 'ClientProfileEditVC'.") }
                if _R.storyboard.main().clientSearchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientSearchVC' could not be loaded from storyboard 'Main' as 'ClientSearchVC'.") }
                if _R.storyboard.main().clientVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientVC' could not be loaded from storyboard 'Main' as 'ClientVC'.") }
                if _R.storyboard.main().documentClientListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentClientListVC' could not be loaded from storyboard 'Main' as 'DocumentClientListVC'.") }
                if _R.storyboard.main().documentDescVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentDescVC' could not be loaded from storyboard 'Main' as 'DocumentDescVC'.") }
                if _R.storyboard.main().documentEditVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentEditVC' could not be loaded from storyboard 'Main' as 'DocumentEditVC'.") }
                if _R.storyboard.main().documentRealtedDocsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentRealtedDocsVC' could not be loaded from storyboard 'Main' as 'DocumentRealtedDocsVC'.") }
                if _R.storyboard.main().documentSearchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentSearchVC' could not be loaded from storyboard 'Main' as 'DocumentSearchVC'.") }
                if _R.storyboard.main().documentServicesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentServicesVC' could not be loaded from storyboard 'Main' as 'DocumentServicesVC'.") }
                if _R.storyboard.main().documentUploadVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentUploadVC' could not be loaded from storyboard 'Main' as 'DocumentUploadVC'.") }
                if _R.storyboard.main().documentsOldVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentsOldVC' could not be loaded from storyboard 'Main' as 'DocumentsOldVC'.") }
                if _R.storyboard.main().documentsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentsVC' could not be loaded from storyboard 'Main' as 'DocumentsVC'.") }
                if _R.storyboard.main().downloadVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'downloadVC' could not be loaded from storyboard 'Main' as 'DownloadVC'.") }
                if _R.storyboard.main().employeeEditVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'employeeEditVC' could not be loaded from storyboard 'Main' as 'EmployeeEditVC'.") }
                if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
                if _R.storyboard.main().imagePreviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imagePreviewVC' could not be loaded from storyboard 'Main' as 'ImagePreviewVC'.") }
                if _R.storyboard.main().inboxDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inboxDetailVC' could not be loaded from storyboard 'Main' as 'InboxDetailVC'.") }
                if _R.storyboard.main().invitationSearchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invitationSearchVC' could not be loaded from storyboard 'Main' as 'InvitationSearchVC'.") }
                if _R.storyboard.main().invitationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invitationsVC' could not be loaded from storyboard 'Main' as 'InvitationsVC'.") }
                if _R.storyboard.main().leftMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftMenuVC' could not be loaded from storyboard 'Main' as 'LeftMenuVC'.") }
                if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
                if _R.storyboard.main().outboxDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'outboxDetailVC' could not be loaded from storyboard 'Main' as 'OutboxDetailVC'.") }
                if _R.storyboard.main().profileOldVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileOldVC' could not be loaded from storyboard 'Main' as 'ProfileOldVC'.") }
                if _R.storyboard.main().serviceListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'serviceListVC' could not be loaded from storyboard 'Main' as 'ServiceListVC'.") }
                if _R.storyboard.main().switchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'switchVC' could not be loaded from storyboard 'Main' as 'SwitchVC'.") }
                if _R.storyboard.main().clientDetailNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientDetailNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
                if _R.storyboard.main().clientEditNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clientEditNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
                if _R.storyboard.main().documentEditNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentEditNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
                if _R.storyboard.main().documentNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
                if _R.storyboard.main().outboxDetailNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'outboxDetailNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
                if _R.storyboard.main().rootNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
            }
            
            fileprivate init() {}
        }
        #endif
        
        fileprivate init() {}
    }
    #endif
    
    fileprivate init() {}
}
